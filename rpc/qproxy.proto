syntax = "proto3";

package rpc;

service QProxy {
  rpc ListQueues (ListQueuesRequest) returns (stream ListQueuesResponse) {}
  rpc CreateQueue (CreateQueueRequest) returns (CreateQueueResponse) {}
  rpc DeleteQueue (DeleteQueueRequest) returns (DeleteQueueResponse) {}
  rpc ModifyQueue (ModifyQueueRequest) returns (ModifyQueueResponse) {}
  rpc PurgeQueue (PurgeQueueRequest) returns (PurgeQueueResponse) {}
  rpc AckMessages (AckMessagesRequest) returns (AckMessagesResponse) {}
  rpc GetMessages (GetMessagesRequest) returns (GetMessagesResponse) {}
  rpc PublishMessages (PublishMessagesRequest) returns (PublishMessagesResponse) {}
  rpc ModifyAckDeadline (ModifyAckDeadlineRequest) returns (ModifyAckDeadlineResponse) {} 
}

message QueueId {
  string Namespace = 1;
  string Name = 2;
}

message ListQueuesRequest {
  string Namespace = 1;
  string Filter = 2;
}

message ListQueuesResponse {
  repeated QueueId queues = 1;
}

message CreateQueueRequest {
  QueueId Id = 1;
  map<string, string> Attributes = 2;
}

message CreateQueueResponse {
}

message DeleteQueueRequest {
  QueueId Id = 1;
}

message DeleteQueueResponse {
}

message ModifyQueueRequest {
  QueueId Id = 1;
  map<string, string> Attributes = 2;
}

message ModifyQueueResponse {
}

message PurgeQueueRequest {
  QueueId Id = 1;
}

message PurgeQueueResponse {
}

message MessageReceipt {
  string Id = 1;
  string ErrorMessage = 2;
}

message FailedPublish {
  int64 Index = 1;
  string ErrormEssage = 2;
}

message Message {
  string Data = 1;
  map<string, string> Attributes = 2;  

  MessageReceipt receipt = 100;
}

message AckMessagesRequest {
  QueueId QueueId = 1;
  repeated MessageReceipt MessageReceipts = 2;
}

message AckMessagesResponse {
  // Return the receipts that failed to ack
  repeated MessageReceipt Failed = 1;
}

message GetMessagesRequest {
  QueueId QueueId = 1;
  // How long to poll for up to MaxMessages messages. 0 implies return immediately
  int64 LongPollSeconds = 2;
  int64 MaxMessages = 3;
  int64 AckDeadlineSeconds = 4;
}

message GetMessagesResponse {
  repeated Message Messages = 1;
}

message PublishMessagesRequest {
  QueueId QueueId = 1;
  repeated Message Messages = 2;
}

message PublishMessagesResponse {
  // Return the indexes of the messages that failed to send
  repeated FailedPublish Failed = 1;
}

message ModifyAckDeadlineRequest {
  MessageReceipt Receipt = 1;
  int32 AckDeadlineSeconds = 2;
}

message ModifyAckDeadlineResponse {
}

